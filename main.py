from flask import Flask, jsonify, render_template, request
import firebase_admin
from firebase_admin import credentials, firestore
import random
import os
import json
from datetime import datetime
import requests

# üîê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if os.environ.get("RAILWAY_ENVIRONMENT"):
    print("üå©Ô∏è –†–µ–∂–∏–º: Railway (production)")
    firebase_key = os.environ.get("FIREBASE_KEY_JSON")
    if not firebase_key:
        raise Exception("‚ùå FIREBASE_KEY_JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")
    cred = credentials.Certificate(json.loads(firebase_key))
else:
    print("üíª –†–µ–∂–∏–º: –ª–æ–∫–∞–ª—å–Ω–∏–π")
    with open("firebase-key.json") as f:
        firebase_key = json.load(f)
    cred = credentials.Certificate(firebase_key)

firebase_admin.initialize_app(cred)
db = firestore.client()

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask
app = Flask(__name__, template_folder="templates", static_folder="static")

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/random-excuse", methods=["GET"])
def random_excuse():
    # üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–º–∞–∑–æ–∫ –∑ Firestore
    excuses_ref = db.collection("excuses").get()
    excuses = [doc.to_dict() for doc in excuses_ref]
    if not excuses:
        return jsonify({"error": "–ù–µ–º–∞—î –≤—ñ–¥–º–∞–∑–æ–∫ üò≠"}), 404

    chosen = random.choice(excuses)
    client_ip = request.remote_addr or "unknown"
    log_entry = f"{datetime.now()} | {client_ip} | {chosen['text']}\n"

    # üìù –ó–∞–ø–∏—Å —É –ª–æ–∫–∞–ª—å–Ω–∏–π –ª–æ–≥-—Ñ–∞–π–ª
    with open("excuse-log.txt", "a", encoding="utf-8") as f:
        f.write(log_entry)

    # ‚òÅÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–æ–≥—É –Ω–∞ EC2 (IaaS)
    try:
        requests.post("http://54.163.84.41:5000/log", json={
            "ip": client_ip,
            "text": chosen["text"]
        })
    except Exception as e:
        print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—É –Ω–∞ EC2:", e)

    # üñºÔ∏è –†–∞–Ω–¥–æ–º–Ω–∞ –≥—ñ—Ñ–∫–∞ –∑ –ø–∞–ø–∫–∏ static/memes
    meme_url = ""
    memes_dir = os.path.join(app.static_folder, "memes")
    if os.path.exists(memes_dir):
        gif_files = [f for f in os.listdir(memes_dir) if f.endswith(".gif")]
        if gif_files:
            selected = random.choice(gif_files)
            meme_url = f"/static/memes/{selected}"

    return jsonify({
        "text": chosen["text"],
        "meme_url": meme_url
    })

@app.route("/logs", methods=["GET"])
def show_logs():
    try:
        with open("excuse-log.txt", "r", encoding="utf-8") as f:
            content = f.read()
        return f"<pre>{content}</pre>"
    except FileNotFoundError:
        return "–§–∞–π–ª –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –©–µ –Ω–µ –±—É–ª–æ –∑–∞–ø–∏—Ç—ñ–≤ –∞–±–æ —Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ."

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ API –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))